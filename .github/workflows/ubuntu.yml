name: Ubuntu CI Test

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Checkout del repositorio
      - uses: actions/checkout@v2

      # Paso 2: Instalación de dependencias necesarias
      - name: install
        run: |
          pip install --user -U gcovr

      # Paso 3: Preparar el proyecto (si es necesario)
      - name: prepare
        run: |
          make prepare

      # Paso 4: Configuración del proyecto
      - name: configure
        run: |
          cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=On

      # Paso 5: Construcción y pruebas
      - name: building and testing
        run: |
          cmake --build build --config Debug --target coverage -j4
          cd build
          ctest .

      # Paso 6: Informe de cobertura de código
      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: build/coverage/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

      # Paso 7: Añadir un comentario de cobertura en el Pull Request
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      # Paso 8: Desplegar en GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}  # Si necesitas un token personal, usa un Secret
          publish_dir: ./docs  # Asegúrate de que esta es la carpeta donde se generan los archivos estáticos
